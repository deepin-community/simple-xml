Description: Fixes the test failures with the recent JDKs
Origin: backport, https://github.com/ngallagher/simplexml/commit/a01c8b98
                  https://github.com/dweiss/simplexml/commit/bf7f4c03
--- a/test/src/org/simpleframework/xml/convert/RegistryStrategyTest.java
+++ b/test/src/org/simpleframework/xml/convert/RegistryStrategyTest.java
@@ -41,11 +41,11 @@
       StringWriter writer = new StringWriter();
       PetShop shop = new PetShop();
       
-      registry.bind(Dog.class, DogConverter.class)
-              .bind(Cat.class, CatConverter.class);
-   
-      shop.addPet(new Dog("Lassie", 10));
+      registry.bind(Cat.class, CatConverter.class);
+      registry.bind(Dog.class, DogConverter.class);
+              
       shop.addPet(new Cat("Kitty", 2));
+      shop.addPet(new Dog("Lassie", 10));
       
       persister.write(shop, writer);
       persister.write(shop, System.out);
@@ -65,10 +65,10 @@
       assertElementDoesNotExist(text, "/petShop/pets/pet[3]");
       assertElementHasNamespace(text, "/petShop", "http://domain/a");
       assertElementHasNamespace(text, "/petShop/pets", "http://domain/b");
-      assertElementHasNamespace(text, "/petShop/pets/pet[1]", null);
-      assertElementHasAttribute(text, "/petShop/pets/pet[1]", "name", "Lassie");
-      assertElementHasAttribute(text, "/petShop/pets/pet[1]", "age", "10");
-      assertElementHasValue(text, "/petShop/pets/pet[2]/name", "Kitty");
-      assertElementHasValue(text, "/petShop/pets/pet[2]/age", "2");
+      assertElementHasNamespace(text, "/petShop/pets/pet[2]", null);
+      assertElementHasAttribute(text, "/petShop/pets/pet[2]", "name", "Lassie");
+      assertElementHasAttribute(text, "/petShop/pets/pet[2]", "age", "10");
+      assertElementHasValue(text, "/petShop/pets/pet[1]/name", "Kitty");
+      assertElementHasValue(text, "/petShop/pets/pet[1]/age", "2");
    }
 }
--- a/test/src/org/simpleframework/xml/core/ConversionTest.java
+++ b/test/src/org/simpleframework/xml/core/ConversionTest.java
@@ -201,11 +201,11 @@
       StringWriter writer = new StringWriter();
       PetShop shop = new PetShop();
       
-      registry.register(Dog.class, DogConverter.class);
       registry.register(Cat.class, CatConverter.class);
+      registry.register(Dog.class, DogConverter.class);
    
-      shop.addPet(new Dog("Lassie", 10));
       shop.addPet(new Cat("Kitty", 2));
+      shop.addPet(new Dog("Lassie", 10));
       
       persister.write(shop, writer);
       persister.write(shop, System.out);
@@ -218,9 +218,9 @@
       assertEquals("Kitty", newShop.getPet("Kitty").getName());
       assertEquals(2, newShop.getPet("Kitty").getAge());
       
-      assertElementHasAttribute(text, "/petShop/pets/pet", "name", "Lassie");
-      assertElementHasAttribute(text, "/petShop/pets/pet", "age", "10");
-      assertElementExists(text, "/petShop/pets/pet[2]/name");
-      assertElementExists(text, "/petShop/pets/pet[2]/age");
+      assertElementHasAttribute(text, "/petShop/pets/pet[2]", "name", "Lassie");
+      assertElementHasAttribute(text, "/petShop/pets/pet[2]", "age", "10");
+      assertElementExists(text, "/petShop/pets/pet[1]/name");
+      assertElementExists(text, "/petShop/pets/pet[1]/age");
    }
 }
--- a/test/src/org/simpleframework/xml/strategy/PrimitiveCycleTest.java
+++ b/test/src/org/simpleframework/xml/strategy/PrimitiveCycleTest.java
@@ -180,6 +180,12 @@
       assertEquals(entry.object.stringValue, "text value");
       assertEquals(entry.object.enumValue, TestEnum.TWO);
 
+      // Create unique objects for types with built-in value caches,
+      // otherwise they'll end up as references.
+      entry.object.booleanValue = new Boolean(entry.object.booleanValue);
+      entry.object.byteValue = new Byte(entry.object.byteValue);
+      entry.object.shortValue = new Short(entry.object.shortValue);
+
       StringWriter out = new StringWriter();
       persister.write(entry, out);
       String text = out.toString();
@@ -201,10 +207,10 @@
       assertElementHasValue(text, "/test/primitive/float", "1234.56");       
       assertElementHasValue(text, "/test/primitive/long", "1234567");       
       assertElementHasValue(text, "/test/primitive/double", "1234567.89");
- 
-      assertElementHasValue(text, "/test/object/Boolean", "true");   
-      assertElementHasValue(text, "/test/object/Byte", "16");  
-      assertElementHasValue(text, "/test/object/Short", "120");       
+
+      assertElementHasValue(text, "/test/object/Boolean", "true");
+      assertElementHasValue(text, "/test/object/Byte", "16");
+      assertElementHasValue(text, "/test/object/Short", "120");
       assertElementHasValue(text, "/test/object/Integer", "1234");        
       assertElementHasValue(text, "/test/object/Float", "1234.56");       
       assertElementHasValue(text, "/test/object/Long", "1234567");       
